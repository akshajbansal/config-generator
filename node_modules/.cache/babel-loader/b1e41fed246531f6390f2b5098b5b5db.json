{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/* eslint-disable react/prop-types */\n\n\nimport React from \"react\";\nimport { Form } from \"semantic-ui-react\";\nimport { getSemanticProps } from \"../util\";\n\nfunction CheckboxWidget(props) {\n  var id = props.id,\n      value = props.value,\n      required = props.required,\n      disabled = props.disabled,\n      readonly = props.readonly,\n      label = props.label,\n      autofocus = props.autofocus,\n      onChange = props.onChange,\n      onBlur = props.onBlur,\n      options = props.options,\n      onFocus = props.onFocus,\n      formContext = props.formContext;\n  var semanticProps = getSemanticProps({\n    formContext: formContext,\n    options: options\n  });\n\n  var _onChange = function _onChange(event, data) {\n    return onChange && onChange(data.checked);\n  };\n\n  var _onBlur = function _onBlur() {\n    return onBlur && onBlur(id, value);\n  };\n\n  var _onFocus = function _onFocus() {\n    return onFocus && onFocus(id, value);\n  };\n\n  var checked = value == \"true\" || value == true;\n  return React.createElement(Form.Checkbox, _extends({\n    id: id,\n    disabled: disabled || readonly,\n    autoFocus: autofocus\n  }, semanticProps, {\n    checked: typeof value === \"undefined\" ? false : checked,\n    onChange: _onChange,\n    onBlur: _onBlur,\n    onFocus: _onFocus,\n    required: required,\n    label: label\n  }));\n}\n\nCheckboxWidget.defaultProps = {\n  options: {\n    semantic: {\n      inverted: false\n    }\n  }\n};\nexport default CheckboxWidget;","map":{"version":3,"sources":["C:/Users/Akshaj Bansal/json parser/my-app/node_modules/@rjsf/semantic-ui/dist/es/CheckboxWidget/CheckboxWidget.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","Form","getSemanticProps","CheckboxWidget","props","id","value","required","disabled","readonly","label","autofocus","onChange","onBlur","options","onFocus","formContext","semanticProps","_onChange","event","data","checked","_onBlur","_onFocus","createElement","Checkbox","autoFocus","defaultProps","semantic","inverted"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/* eslint-disable react/prop-types */\nimport React from \"react\";\nimport { Form } from \"semantic-ui-react\";\nimport { getSemanticProps } from \"../util\";\n\nfunction CheckboxWidget(props) {\n  var id = props.id,\n      value = props.value,\n      required = props.required,\n      disabled = props.disabled,\n      readonly = props.readonly,\n      label = props.label,\n      autofocus = props.autofocus,\n      onChange = props.onChange,\n      onBlur = props.onBlur,\n      options = props.options,\n      onFocus = props.onFocus,\n      formContext = props.formContext;\n  var semanticProps = getSemanticProps({\n    formContext: formContext,\n    options: options\n  });\n\n  var _onChange = function _onChange(event, data) {\n    return onChange && onChange(data.checked);\n  };\n\n  var _onBlur = function _onBlur() {\n    return onBlur && onBlur(id, value);\n  };\n\n  var _onFocus = function _onFocus() {\n    return onFocus && onFocus(id, value);\n  };\n\n  var checked = value == \"true\" || value == true;\n  return React.createElement(Form.Checkbox, _extends({\n    id: id,\n    disabled: disabled || readonly,\n    autoFocus: autofocus\n  }, semanticProps, {\n    checked: typeof value === \"undefined\" ? false : checked,\n    onChange: _onChange,\n    onBlur: _onBlur,\n    onFocus: _onFocus,\n    required: required,\n    label: label\n  }));\n}\n\nCheckboxWidget.defaultProps = {\n  options: {\n    semantic: {\n      inverted: false\n    }\n  }\n};\nexport default CheckboxWidget;"]},"metadata":{},"sourceType":"module"}