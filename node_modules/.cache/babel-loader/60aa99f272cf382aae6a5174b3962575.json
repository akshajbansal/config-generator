{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshaj Bansal\\\\json parser\\\\my-app\\\\src\\\\index.js\";\nimport React, { Component, PureComponent } from 'react';\nimport get from \"lodash/get\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Form from \"react-jsonschema-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CollapsibleFieldTemplate extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.isThisTheTopmostElement = () => {\n      const {\n        id\n      } = this.props;\n      return id === \"root\";\n    };\n\n    const {\n      formContext\n    } = props;\n    const topmostElement = this.isThisTheTopmostElement();\n    this.state = {\n      collapsed: topmostElement ? false : formContext.hideAll,\n      topmostElement,\n      hideAll: formContext.hideAll\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    const {\n      formContext\n    } = nextProps;\n    const {\n      hideAll,\n      topmostElement\n    } = state;\n\n    if (hideAll !== formContext.hideAll) {\n      return {\n        collapsed: topmostElement ? false : formContext.hideAll,\n        hideAll: formContext.hideAll\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      label,\n      help,\n      required,\n      description,\n      errors,\n      classNames,\n      children,\n      hidden,\n      schema\n    } = this.props;\n    const {\n      collapsed,\n      hideAll\n    } = this.state;\n    const type = get(schema, \"type\", undefined);\n    let legend = null;\n\n    if (type !== \"object\" && type !== \"array\") {\n      legend = label ? `${label}${required ? \"*\" : \"\"}` : null;\n    } else if (collapsed) {\n      legend = /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"field field-array field-array-of-object\",\n        children: label ? /*#__PURE__*/_jsxDEV(\"legend\", {\n          children: `${label}${required ? \"*\" : \"\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 20\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this);\n    }\n\n    let contentToRender = null;\n\n    if (!collapsed) {\n      contentToRender = /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [type !== \"object\" && type !== \"array\" ? description : null, children, errors, help]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: hidden ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classNames,\n        children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [!this.isThisTheTopmostElement() ? /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n            placement: \"top\",\n            delay: {\n              show: 300,\n              hide: 100\n            },\n            overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n              children: [collapsed ? \"Expand\" : \"Collapse\", \" the field\", !collapsed ? `, resetting all of the field's children to being ${hideAll ? \"collapsed\" : \"expanded\"}` : \"\", \".\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 21\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline-secondary\",\n              size: \"sm\",\n              style: {\n                display: \"inline-block\",\n                float: \"right\",\n                fontSize: \"large\"\n              },\n              onClick: () => this.setState({\n                collapsed: !collapsed\n              }),\n              children: collapsed ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [\"+\", get(errors, \"props.errors\", []).length ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    fontSize: \"small\"\n                  },\n                  children: [\" \", \"(Contains errors)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 27\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 23\n              }, this) : \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this) : null, legend ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [\" \", legend]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this) : null, contentToRender]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst schema = {\n  title: \"A registration form\",\n  description: \"A simple form example. Uses example data from the react-jsonschema-form live playground.\",\n  type: \"object\",\n  required: [\"firstName\", \"lastName\"],\n  properties: {\n    firstName: {\n      type: \"string\",\n      title: \"First name\",\n      default: \"Chuck\"\n    },\n    lastName: {\n      type: \"string\",\n      title: \"Last name\"\n    },\n    age: {\n      type: \"integer\",\n      title: \"Age\"\n    },\n    militaryCareer: {\n      type: \"object\",\n      description: \"An example object.\",\n      properties: {\n        rank: {\n          type: \"string\"\n        },\n        unit: {\n          type: \"string\"\n        }\n      }\n    },\n    skills: {\n      description: \"An example array.\",\n      type: \"array\",\n      items: {\n        type: \"string\"\n      }\n    },\n    bio: {\n      type: \"string\",\n      title: \"Bio\"\n    },\n    telephone: {\n      type: \"string\",\n      title: \"Telephone\",\n      minLength: 10\n    }\n  }\n};\nconst formData = {\n  firstName: \"Chuck\",\n  lastName: \"Norris\",\n  age: 79,\n  bio: \"Born in 1940\",\n  militaryCareer: {\n    rank: \"Airman First Class\",\n    unit: \"15th Air Force\"\n  },\n  skills: [\"Martial Arts\", \"Philanthropy\", \"Acting\"]\n};\n\nconst log = type => console.log.bind(console, type);\n\nrender( /*#__PURE__*/_jsxDEV(Form, {\n  schema: schema,\n  autocomplete: \"on\",\n  formData: formData,\n  FieldTemplate: CollapsibleFieldTemplate,\n  formContext: {\n    hideAll: false\n  },\n  onChange: log(\"changed\"),\n  onSubmit: log(\"submitted\"),\n  onError: log(\"errors\")\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 209,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 225,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["C:/Users/Akshaj Bansal/json parser/my-app/src/index.js"],"names":["React","Component","PureComponent","get","ReactDOM","App","reportWebVitals","Form","CollapsibleFieldTemplate","constructor","props","isThisTheTopmostElement","id","formContext","topmostElement","state","collapsed","hideAll","getDerivedStateFromProps","nextProps","render","label","help","required","description","errors","classNames","children","hidden","schema","type","undefined","legend","contentToRender","show","hide","display","float","fontSize","setState","length","title","properties","firstName","default","lastName","age","militaryCareer","rank","unit","skills","items","bio","telephone","minLength","formData","log","console","bind","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent } from 'react';\nimport get from \"lodash/get\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Form from \"react-jsonschema-form\";\n\nclass CollapsibleFieldTemplate extends PureComponent<Props> {\n  constructor(props) {\n    super(props);\n\n    const { formContext } = props;\n\n    const topmostElement = this.isThisTheTopmostElement();\n\n    this.state = {\n      collapsed: topmostElement ? false : formContext.hideAll,\n      topmostElement,\n      hideAll: formContext.hideAll\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    const { formContext } = nextProps;\n    const { hideAll, topmostElement } = state;\n\n    if (hideAll !== formContext.hideAll) {\n      return {\n        collapsed: topmostElement ? false : formContext.hideAll,\n        hideAll: formContext.hideAll\n      };\n    }\n\n    return null;\n  }\n\n  isThisTheTopmostElement = () => {\n    const { id } = this.props;\n\n    return id === \"root\";\n  };\n\n  render() {\n    const {\n      label,\n      help,\n      required,\n      description,\n      errors,\n      classNames,\n      children,\n      hidden,\n      schema\n    } = this.props;\n\n    const { collapsed, hideAll } = this.state;\n\n    const type = get(schema, \"type\", undefined);\n\n    let legend = null;\n\n    if (type !== \"object\" && type !== \"array\") {\n      legend = label ? `${label}${required ? \"*\" : \"\"}` : null;\n    } else if (collapsed) {\n      legend = (\n        <fieldset className=\"field field-array field-array-of-object\">\n          {label ? <legend>{`${label}${required ? \"*\" : \"\"}`}</legend> : null}\n        </fieldset>\n      );\n    }\n\n    let contentToRender = null;\n\n    if (!collapsed) {\n      contentToRender = (\n        <React.Fragment>\n          {type !== \"object\" && type !== \"array\" ? description : null}\n          {children}\n          {errors}\n          {help}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {hidden ? null : (\n          <div className={classNames}>\n            <React.Fragment>\n              {!this.isThisTheTopmostElement() ? (\n                <OverlayTrigger\n                  placement=\"top\"\n                  delay={{ show: 300, hide: 100 }}\n                  overlay={\n                    <Tooltip>\n                      {collapsed ? \"Expand\" : \"Collapse\"} the field\n                      {!collapsed\n                        ? `, resetting all of the field's children to being ${\n                            hideAll ? \"collapsed\" : \"expanded\"\n                          }`\n                        : \"\"}\n                      .\n                    </Tooltip>\n                  }\n                >\n                  <Button\n                    variant=\"outline-secondary\"\n                    size=\"sm\"\n                    style={{\n                      display: \"inline-block\",\n                      float: \"right\",\n                      fontSize: \"large\"\n                    }}\n                    onClick={() => this.setState({ collapsed: !collapsed })}\n                  >\n                    {collapsed ? (\n                      <React.Fragment>\n                        +\n                        {get(errors, \"props.errors\", []).length ? (\n                          <span style={{ fontSize: \"small\" }}>\n                            {\" \"}\n                            (Contains errors)\n                          </span>\n                        ) : null}\n                      </React.Fragment>\n                    ) : (\n                      \"-\"\n                    )}\n                  </Button>\n                </OverlayTrigger>\n              ) : null}\n              {legend ? <React.Fragment> {legend}</React.Fragment> : null}\n              {contentToRender}\n            </React.Fragment>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst schema = {\n  title: \"A registration form\",\n  description:\n    \"A simple form example. Uses example data from the react-jsonschema-form live playground.\",\n  type: \"object\",\n  required: [\"firstName\", \"lastName\"],\n  properties: {\n    firstName: {\n      type: \"string\",\n      title: \"First name\",\n      default: \"Chuck\"\n    },\n    lastName: {\n      type: \"string\",\n      title: \"Last name\"\n    },\n    age: {\n      type: \"integer\",\n      title: \"Age\"\n    },\n    militaryCareer: {\n      type: \"object\",\n      description: \"An example object.\",\n      properties: {\n        rank: {\n          type: \"string\"\n        },\n        unit: {\n          type: \"string\"\n        }\n      }\n    },\n    skills: {\n      description: \"An example array.\",\n      type: \"array\",\n      items: {\n        type: \"string\"\n      }\n    },\n    bio: {\n      type: \"string\",\n      title: \"Bio\"\n    },\n    telephone: {\n      type: \"string\",\n      title: \"Telephone\",\n      minLength: 10\n    }\n  }\n};\n\nconst formData = {\n  firstName: \"Chuck\",\n  lastName: \"Norris\",\n  age: 79,\n  bio: \"Born in 1940\",\n  militaryCareer: {\n    rank: \"Airman First Class\",\n    unit: \"15th Air Force\"\n  },\n  skills: [\"Martial Arts\", \"Philanthropy\", \"Acting\"]\n};\n\nconst log = type => console.log.bind(console, type);\n\nrender(\n  <Form\n    schema={schema}\n    autocomplete=\"on\"\n    formData={formData}\n    FieldTemplate={CollapsibleFieldTemplate}\n    formContext={{ hideAll: false }}\n    onChange={log(\"changed\")}\n    onSubmit={log(\"submitted\")}\n    onError={log(\"errors\")}\n  />,\n  document.getElementById(\"root\")\n);\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}