{"ast":null,"code":"import { TimeConstants } from '../dateValues/timeConstants';\n/**\n * Returns a date offset from the given date by the specified number of minutes.\n * @param date - The origin date\n * @param minutes - The number of minutes to offset. 'minutes' can be negative.\n * @returns A new Date object offset from the origin date by the given number of minutes\n */\n\nexport var addMinutes = function (date, minutes) {\n  var result = new Date(date.getTime());\n  result.setTime(result.getTime() + minutes * TimeConstants.MinutesInOneHour * TimeConstants.MillisecondsIn1Sec);\n  return result;\n};\n/**\n * Rounds the date's minute up to the next available increment. For example, if `date` has time 1:21\n * and `increments` is 5, the resulting time will be 1:25.\n * @param date - Date to ceil minutes\n * @param increments - Time increments\n * @returns Date with ceiled minute\n */\n\nexport var ceilMinuteToIncrement = function (date, increments) {\n  var result = new Date(date.getTime());\n  var minute = result.getMinutes();\n\n  if (TimeConstants.MinutesInOneHour % increments) {\n    result.setMinutes(0);\n  } else {\n    var times = TimeConstants.MinutesInOneHour / increments;\n\n    for (var i = 1; i <= times; i++) {\n      if (minute > increments * (i - 1) && minute <= increments * i) {\n        minute = increments * i;\n        break;\n      }\n    }\n\n    result.setMinutes(minute);\n  }\n\n  return result;\n};","map":{"version":3,"sources":["timeMath/timeMath.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAA8B,6BAA9B;AAEA;;;;;AAKG;;AACH,OAAO,IAAM,UAAU,GAAG,UAAC,IAAD,EAAa,OAAb,EAA4B;AACpD,MAAM,MAAM,GAAG,IAAI,IAAJ,CAAS,IAAI,CAAC,OAAL,EAAT,CAAf;AACA,EAAA,MAAM,CAAC,OAAP,CAAe,MAAM,CAAC,OAAP,KAAmB,OAAO,GAAG,aAAa,CAAC,gBAAxB,GAA2C,aAAa,CAAC,kBAA3F;AACA,SAAO,MAAP;AACD,CAJM;AAMP;;;;;;AAMG;;AACH,OAAO,IAAM,qBAAqB,GAAG,UAAC,IAAD,EAAa,UAAb,EAA+B;AAClE,MAAM,MAAM,GAAG,IAAI,IAAJ,CAAS,IAAI,CAAC,OAAL,EAAT,CAAf;AACA,MAAI,MAAM,GAAG,MAAM,CAAC,UAAP,EAAb;;AACA,MAAI,aAAa,CAAC,gBAAd,GAAiC,UAArC,EAAiD;AAC/C,IAAA,MAAM,CAAC,UAAP,CAAkB,CAAlB;AACD,GAFD,MAEO;AACL,QAAM,KAAK,GAAG,aAAa,CAAC,gBAAd,GAAiC,UAA/C;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,KAArB,EAA4B,CAAC,EAA7B,EAAiC;AAC/B,UAAI,MAAM,GAAG,UAAU,IAAI,CAAC,GAAG,CAAR,CAAnB,IAAiC,MAAM,IAAI,UAAU,GAAG,CAA5D,EAA+D;AAC7D,QAAA,MAAM,GAAG,UAAU,GAAG,CAAtB;AACA;AACD;AACF;;AACD,IAAA,MAAM,CAAC,UAAP,CAAkB,MAAlB;AACD;;AACD,SAAO,MAAP;AACD,CAhBM","sourcesContent":["import { TimeConstants } from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of minutes.\n * @param date - The origin date\n * @param minutes - The number of minutes to offset. 'minutes' can be negative.\n * @returns A new Date object offset from the origin date by the given number of minutes\n */\nexport const addMinutes = (date: Date, minutes: number): Date => {\n  const result = new Date(date.getTime());\n  result.setTime(result.getTime() + minutes * TimeConstants.MinutesInOneHour * TimeConstants.MillisecondsIn1Sec);\n  return result;\n};\n\n/**\n * Rounds the date's minute up to the next available increment. For example, if `date` has time 1:21\n * and `increments` is 5, the resulting time will be 1:25.\n * @param date - Date to ceil minutes\n * @param increments - Time increments\n * @returns Date with ceiled minute\n */\nexport const ceilMinuteToIncrement = (date: Date, increments: number) => {\n  const result = new Date(date.getTime());\n  let minute = result.getMinutes();\n  if (TimeConstants.MinutesInOneHour % increments) {\n    result.setMinutes(0);\n  } else {\n    const times = TimeConstants.MinutesInOneHour / increments;\n    for (let i = 1; i <= times; i++) {\n      if (minute > increments * (i - 1) && minute <= increments * i) {\n        minute = increments * i;\n        break;\n      }\n    }\n    result.setMinutes(minute);\n  }\n  return result;\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}