{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes } from '../../Utilities';\nimport { TimeConstants, addMinutes, formatTimeString, ceilMinuteToIncrement } from '@fluentui/date-time-utilities';\nimport { ComboBox } from '../../ComboBox';\nvar REGEX_SHOW_SECONDS_HOUR_12 = /((1[0-2]|0?[1-9]):([0-5][0-9]):(?:[0-5]\\d) ?([AaPp][Mm]))$/;\nvar REGEX_HIDE_SECONDS_HOUR_12 = /((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))$/;\nvar REGEX_SHOW_SECONDS_HOUR_24 = /([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:[0-5]\\d):(?:[0-5]\\d)$/;\nvar REGEX_HIDE_SECONDS_HOUR_24 = /([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:[0-5]\\d)$/;\nvar TIME_LOWER_BOUND = 0;\nvar TIME_UPPER_BOUND = 23;\n\nvar getDefaultStrings = function (useHour12, showSeconds) {\n  var errorMessageToDisplay = '';\n  var hourUnits = useHour12 ? '12-hour' : '24-hour';\n  showSeconds ? errorMessageToDisplay = \"TimePicker format must be valid and in the \" + hourUnits + \" \" + \"format hh:mm:ss A.\" : errorMessageToDisplay = \"TimePicker format must be valid and in the \" + hourUnits + \" \" + \"format hh:mm A.\";\n  return {\n    invalidInputErrorMessage: errorMessageToDisplay\n  };\n};\n\nexport var TimePicker = function (_a) {\n  var label = _a.label,\n      _b = _a.increments,\n      increments = _b === void 0 ? 30 : _b,\n      _c = _a.showSeconds,\n      showSeconds = _c === void 0 ? false : _c,\n      _d = _a.allowFreeform,\n      allowFreeform = _d === void 0 ? true : _d,\n      _e = _a.useHour12,\n      useHour12 = _e === void 0 ? false : _e,\n      timeRange = _a.timeRange,\n      _f = _a.strings,\n      strings = _f === void 0 ? getDefaultStrings(useHour12, showSeconds) : _f,\n      onFormatDate = _a.onFormatDate,\n      onValidateUserInput = _a.onValidateUserInput,\n      onChange = _a.onChange,\n      rest = __rest(_a, [\"label\", \"increments\", \"showSeconds\", \"allowFreeform\", \"useHour12\", \"timeRange\", \"strings\", \"onFormatDate\", \"onValidateUserInput\", \"onChange\"]);\n\n  var _g = React.useState(''),\n      userText = _g[0],\n      setUserText = _g[1];\n\n  var _h = React.useState(''),\n      errorMessage = _h[0],\n      setErrorMessage = _h[1];\n\n  var optionsCount = getDropdownOptionsCount(increments, timeRange);\n  var timePickerOptions = React.useMemo(function () {\n    var optionsList = Array(optionsCount);\n\n    for (var i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n\n    var defaultTime = generateDefaultTime(increments, timeRange);\n    return optionsList.map(function (_, index) {\n      var option = addMinutes(defaultTime, increments * index);\n      option.setSeconds(0);\n      var optionText = onFormatDate ? onFormatDate(option) : formatTimeString(option, showSeconds, useHour12);\n      return {\n        key: optionText,\n        text: optionText\n      };\n    });\n  }, [timeRange, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n\n  var _j = React.useState(timePickerOptions[0].key),\n      selectedKey = _j[0],\n      setSelectedKey = _j[1];\n\n  var onInputChange = React.useCallback(function (event, option, index, value) {\n    if (onChange) {\n      onChange(event, option, index, value);\n    }\n\n    var validateUserInput = function (userInput) {\n      var errorMessageToDisplay = '';\n      var regex;\n\n      if (useHour12) {\n        regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n      } else {\n        regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n      }\n\n      if (!regex.test(userInput)) {\n        errorMessageToDisplay = strings.invalidInputErrorMessage;\n      }\n\n      return errorMessageToDisplay;\n    };\n\n    var key = option === null || option === void 0 ? void 0 : option.key;\n    var updatedUserText = '';\n    var errorMessageToDisplay = '';\n\n    if (value) {\n      if (allowFreeform && !option) {\n        if (!onFormatDate) {\n          // Validate only if user did not add onFormatDate\n          errorMessageToDisplay = validateUserInput(value);\n        } else {\n          // Use user provided validation if onFormatDate is provided\n          if (onValidateUserInput) {\n            errorMessageToDisplay = onValidateUserInput(value);\n          }\n        }\n      }\n\n      updatedUserText = value;\n    } else if (option) {\n      updatedUserText = option.text;\n    }\n\n    setErrorMessage(errorMessageToDisplay);\n    setUserText(updatedUserText);\n    setSelectedKey(key);\n  }, [allowFreeform, onFormatDate, onValidateUserInput, showSeconds, useHour12, onChange, strings.invalidInputErrorMessage]);\n\n  var evaluatePressedKey = function (event) {\n    if (!onFormatDate && // Only permit input of digits, space, colon, A/P/M characters\n    !(event.charCode >= KeyCodes.zero && event.charCode <= KeyCodes.colon || event.charCode === KeyCodes.space || event.charCode === KeyCodes.a || event.charCode === KeyCodes.m || event.charCode === KeyCodes.p)) {\n      event.preventDefault();\n    }\n  };\n\n  return React.createElement(ComboBox, __assign({}, rest, {\n    allowFreeform: allowFreeform,\n    selectedKey: selectedKey,\n    label: label,\n    errorMessage: errorMessage,\n    options: timePickerOptions,\n    onChange: onInputChange,\n    text: userText,\n    //eslint-disable-next-line\n    onKeyPress: evaluatePressedKey\n  }));\n};\nTimePicker.displayName = 'TimePicker';\n\nvar clampTimeRange = function (timeRange) {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND)\n  };\n};\n\nvar generateDefaultTime = function (increments, timeRange) {\n  var newDefaultTime = new Date();\n\n  if (timeRange) {\n    var clampedTimeRange = clampTimeRange(timeRange);\n    newDefaultTime.setHours(clampedTimeRange.start);\n  }\n\n  return ceilMinuteToIncrement(newDefaultTime, increments);\n};\n\nvar getDropdownOptionsCount = function (increments, timeRange) {\n  var hoursInRange = TimeConstants.HoursInOneDay;\n\n  if (timeRange) {\n    var clampedTimeRange = clampTimeRange(timeRange);\n\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n\n  return Math.floor(TimeConstants.MinutesInOneHour * hoursInRange / increments);\n};","map":{"version":3,"sources":["components/TimePicker/TimePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { KeyCodes } from '../../Utilities';\nimport { TimeConstants, addMinutes, formatTimeString, ceilMinuteToIncrement } from '@fluentui/date-time-utilities';\nimport { ComboBox, IComboBox, IComboBoxOption } from '../../ComboBox';\nimport { ITimePickerProps, ITimeRange, ITimePickerStrings } from './TimePicker.types';\n\nconst REGEX_SHOW_SECONDS_HOUR_12 = /((1[0-2]|0?[1-9]):([0-5][0-9]):(?:[0-5]\\d) ?([AaPp][Mm]))$/;\nconst REGEX_HIDE_SECONDS_HOUR_12 = /((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))$/;\nconst REGEX_SHOW_SECONDS_HOUR_24 = /([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:[0-5]\\d):(?:[0-5]\\d)$/;\nconst REGEX_HIDE_SECONDS_HOUR_24 = /([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:[0-5]\\d)$/;\n\nconst TIME_LOWER_BOUND = 0;\nconst TIME_UPPER_BOUND = 23;\n\nconst getDefaultStrings = (useHour12: boolean, showSeconds: boolean): ITimePickerStrings => {\n  let errorMessageToDisplay = '';\n  const hourUnits = useHour12 ? '12-hour' : '24-hour';\n  showSeconds\n    ? (errorMessageToDisplay = `TimePicker format must be valid and in the ${hourUnits} ` + `format hh:mm:ss A.`)\n    : (errorMessageToDisplay = `TimePicker format must be valid and in the ${hourUnits} ` + `format hh:mm A.`);\n\n  return {\n    invalidInputErrorMessage: errorMessageToDisplay,\n  };\n};\n\nexport const TimePicker: React.FunctionComponent<ITimePickerProps> = ({\n  label,\n  increments = 30,\n  showSeconds = false,\n  allowFreeform = true,\n  useHour12 = false,\n  timeRange,\n  strings = getDefaultStrings(useHour12, showSeconds),\n  onFormatDate,\n  onValidateUserInput,\n  onChange,\n  ...rest\n}: ITimePickerProps) => {\n  const [userText, setUserText] = React.useState<string>('');\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\n\n  const optionsCount = getDropdownOptionsCount(increments, timeRange);\n\n  const timePickerOptions: IComboBoxOption[] = React.useMemo(() => {\n    const optionsList = Array(optionsCount);\n    for (let i = 0; i < optionsCount; i++) {\n      optionsList[i] = 0;\n    }\n    const defaultTime = generateDefaultTime(increments, timeRange);\n\n    return optionsList.map((_, index) => {\n      const option = addMinutes(defaultTime, increments * index);\n      option.setSeconds(0);\n      const optionText = onFormatDate ? onFormatDate(option) : formatTimeString(option, showSeconds, useHour12);\n      return {\n        key: optionText,\n        text: optionText,\n      };\n    });\n  }, [timeRange, increments, optionsCount, showSeconds, onFormatDate, useHour12]);\n\n  const [selectedKey, setSelectedKey] = React.useState<string | number | undefined>(timePickerOptions[0].key);\n\n  const onInputChange = React.useCallback(\n    (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string): void => {\n      if (onChange) {\n        onChange(event, option, index, value);\n      }\n\n      const validateUserInput = (userInput: string): string => {\n        let errorMessageToDisplay = '';\n        let regex: RegExp;\n        if (useHour12) {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_12 : REGEX_HIDE_SECONDS_HOUR_12;\n        } else {\n          regex = showSeconds ? REGEX_SHOW_SECONDS_HOUR_24 : REGEX_HIDE_SECONDS_HOUR_24;\n        }\n        if (!regex.test(userInput)) {\n          errorMessageToDisplay = strings.invalidInputErrorMessage;\n        }\n        return errorMessageToDisplay;\n      };\n\n      const key = option?.key;\n      let updatedUserText = '';\n      let errorMessageToDisplay = '';\n      if (value) {\n        if (allowFreeform && !option) {\n          if (!onFormatDate) {\n            // Validate only if user did not add onFormatDate\n            errorMessageToDisplay = validateUserInput(value);\n          } else {\n            // Use user provided validation if onFormatDate is provided\n            if (onValidateUserInput) {\n              errorMessageToDisplay = onValidateUserInput(value);\n            }\n          }\n        }\n        updatedUserText = value;\n      } else if (option) {\n        updatedUserText = option.text;\n      }\n\n      setErrorMessage(errorMessageToDisplay);\n      setUserText(updatedUserText);\n      setSelectedKey(key);\n    },\n    [\n      allowFreeform,\n      onFormatDate,\n      onValidateUserInput,\n      showSeconds,\n      useHour12,\n      onChange,\n      strings.invalidInputErrorMessage,\n    ],\n  );\n\n  const evaluatePressedKey = (event: React.KeyboardEvent<IComboBox>) => {\n    if (\n      !onFormatDate &&\n      // Only permit input of digits, space, colon, A/P/M characters\n      !(\n        (event.charCode >= KeyCodes.zero && event.charCode <= KeyCodes.colon) ||\n        event.charCode === KeyCodes.space ||\n        event.charCode === KeyCodes.a ||\n        event.charCode === KeyCodes.m ||\n        event.charCode === KeyCodes.p\n      )\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  return (\n    <ComboBox\n      {...rest}\n      allowFreeform={allowFreeform}\n      selectedKey={selectedKey}\n      label={label}\n      errorMessage={errorMessage}\n      options={timePickerOptions}\n      onChange={onInputChange}\n      text={userText}\n      //eslint-disable-next-line\n      onKeyPress={evaluatePressedKey}\n    />\n  );\n};\nTimePicker.displayName = 'TimePicker';\n\nconst clampTimeRange = (timeRange: ITimeRange): ITimeRange => {\n  return {\n    start: Math.min(Math.max(timeRange.start, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n    end: Math.min(Math.max(timeRange.end, TIME_LOWER_BOUND), TIME_UPPER_BOUND),\n  };\n};\n\nconst generateDefaultTime = (increments: number, timeRange: ITimeRange | undefined) => {\n  const newDefaultTime = new Date();\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    newDefaultTime.setHours(clampedTimeRange.start);\n  }\n\n  return ceilMinuteToIncrement(newDefaultTime, increments);\n};\n\nconst getDropdownOptionsCount = (increments: number, timeRange: ITimeRange | undefined) => {\n  let hoursInRange = TimeConstants.HoursInOneDay;\n  if (timeRange) {\n    const clampedTimeRange = clampTimeRange(timeRange);\n    if (clampedTimeRange.start > clampedTimeRange.end) {\n      hoursInRange = TimeConstants.HoursInOneDay - timeRange.start - timeRange.end;\n    } else if (timeRange.end > timeRange.start) {\n      hoursInRange = timeRange.end - timeRange.start;\n    }\n  }\n  return Math.floor((TimeConstants.MinutesInOneHour * hoursInRange) / increments);\n};\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}